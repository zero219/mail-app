#set($packageName = ${package.Entity.replace(".entity", "")})
package ${package.ServiceImpl};

import ${package.Service}.${entity}Service;
import ${package.Mapper}.${entity}Mapper;
import ${package.Entity}.${entity};
import ${packageName}.query.${entity}Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;

import java.util.List;

/**
 * ${entity}ServiceImpl 类
 * 实现了 ${entity}Service 接口，提供增、删、改、查等服务
 */
@Service
public class ${entity}ServiceImpl extends ServiceImpl<${entity}Mapper, ${entity}> implements ${entity}Service {

    @Autowired
    private ${entity}Mapper ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper;

    /**
    * 根据查询条件进行分页查询
    * @param query 查询条件，包含分页信息
    * @return 返回分页结果，包含当前页的数据和分页信息
    */
    @Override
    public PageResult<List<${entity}>> findByPage(${entity}Query query) {
        // 计算分页的偏移量，offset = (当前页 - 1) * 每页条数
        int offset = (query.getPage() - 1) * query.getPageSize();

        // 获取每页显示的条数
        int limit = query.getPageSize();

        // 查询符合条件的总记录数
        int total = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.findCount(query);

        // 查询当前页的数据列表，传递查询条件、偏移量和每页条数
        List<${entity}> list = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.findPageList(query, offset, limit);

        // 计算总页数，使用整数除法，避免总页数为零
        int totalPages = (total + query.getPageSize() - 1) / query.getPageSize();

        // 返回分页结果，包含总记录数、当前页、每页条数、总页数以及当前页的数据
        return new PageResult<>(total, query.getPage(), query.getPageSize(), totalPages, list);
    }

    /**
     * 查询所有数据
     * @return ${entity} 实体列表
     */
    @Override
    public List<${entity}> findAll() {
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.findAll();
    }

    /**
     * 根据ID查询数据
     * @param id 主键ID
     * @return ${entity} 实体对象
     */
    @Override
    public ${entity} findById(Long id) {
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.findById(id);
    }

    /**
     * 根据IDS查询数据
     * @param ids 主键ID
     * @return ${entity} 实体对象
     */
    @Override
    public List<${entity}> findBatchIds(List<Long> ids){
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.findBatchIds(ids);
    }

    /**
     * 插入一条数据
     * @param entity ${entity} 实体对象
     * @return 插入的行数
     */
    @Override
    public int add${entity}(${entity} entity) {
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.add${entity}(entity);
    }

    /**
     * 根据ID更新数据
     * @param entity ${entity} 实体对象
     * @return 更新的行数
     */
    @Override
    public int update${entity}(${entity} entity) {
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.update${entity}(entity);
    }

    /**
     * 根据ID删除数据
     * @param id 主键ID
     * @return 删除的行数
     */
    @Override
    public int del${entity}(Long id) {
        return ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Mapper.del${entity}(id);
    }

}
